class Game {

    // The square
    field Ship square;
      
    // The square's movement direction
    field int direction; // 0=none,1=up,2=down,3=left,4=right
  
    field int isBullet;
      field Array enemies;
      field int enemiesDead;
      field int numEnemies;
      field EnemyBullet enBullet;
      field int numEnB;
      field int isEnBullet;
      field int enemySize;
      field int ss; // ship size
      field int ssx, ssy;
      field int ouch; // 0 = not hit, 1 = hit
      field int enemyToFire;
      field int time;
      
      
    /** Constructs a new Square Game. */
    constructor Game new() {
      let square = Ship.new();
      let direction = 0;
      let isBullet = 0;
          let enemiesDead = 0;		
          let numEnemies = 10;
          let enemies = Array.new(numEnemies);		
          let numEnB = 0;
          let isEnBullet = 0;
          let enemySize = 10;
          let ss = 3;
          let ssx = 50;
          let ssy = 10;
          let enemyToFire = 0;
          let time = 0;
          
          do makeEnemies();
          return this;
    }
      
  //make enemies
  method void makeEnemies() {
      var int x, y, c;
      var Enemy e;
      let x = 15;
      let y = 50;
      let c = 0;
          
      while (c < numEnemies) {
          let e = Enemy.new(x, y, enemySize);
          let enemies[c] = e;
              
          let x = x + 20;
          let c = c+1;
      }
          return;
  }
      
  //check if enemy is hit
  method int hitEnemy(Bullet b) {
      var int c, i, test;
      var Enemy en;
      let c = 0;
      while (c < numEnemies) {
          let en = enemies[c];
          let i = bulletHitEnemy(en, b);
          if (i = 1) {		
              do en.dispose();
              
              let enemiesDead = enemiesDead + 1;
              if (enemiesDead = numEnemies) {                  
                  do Memory.deAlloc(enemies);
                  let enemies = Array.new(numEnemies);
                  do makeEnemies();
                  let enemiesDead = 0;
              }
                  return 1;
              }
              let c = c+1;
          }
      return 0;
  }
      
  method int bulletHitEnemy(Enemy en, Bullet b) {
      var int eny, enx;
      var int by, bx;
      let by = b.getY();
      let eny = en.getY();
      let bx = b.getX();
      let enx = en.getX();
      
      if ( (~(by < eny)) & (~(by > (eny+enemySize))) ) {
          if ((~(bx < enx)) & (~(bx > (enx+enemySize)))) {
              return 1;
          }
      }			
      return 0;
  }
      
  method void moveEnemies() {
      var int c;
      var Enemy enR, enL, temp_en, en;
      var int enrx;
      var int enlx;
      var int eny;
      var int dir;
      var int dead, found;
      var int atLeft, atRight, atBottom;
      
      // get first alive enemy on the left
      let c = 0; let found = 0;
      while ((c < numEnemies) & ~found) {
          let temp_en = enemies[c];
          let dead = temp_en.getIsDead();
          if (dead = 0) {
              let enL = temp_en;
              let found = 1;
          }
          let c = c + 1;
      }
          
      // get the first alive enemy on the right of line
      let c = 9; let found = 0;
      while ((c > -1) & ~found) {
          let temp_en = enemies[c];
          let dead = temp_en.getIsDead();
          if (dead = 0) {
              let enR = temp_en;
              let found = 1;
          }
          let c = c - 1;
      }
      
      let enrx = enR.getX();
      let enlx = enL.getX();
      let eny = enL.getY();
      let dir = enL.getDirection();
      
      let atLeft = 0; let atRight = 0; let atBottom = 1; 
      if (enlx < 20) {
          let atLeft = 1;
      }
      if (enrx > 490) {
          let atRight = 1;
      }
      if (eny > 200) {
          let atBottom = 1;
      }
  
         
      if (dir = 1) { // going right
          if (atRight = 0) {
              // continue moving right
              let c = 0;
              while (c < numEnemies) {
                  let en = enemies[c];
                  do en.moveX();
                  let c = c + 1;
              }
          }
          else {
              if (atBottom = 1) { // are currently at right border
                  // move left
                  let c = 0;
                  while (c < numEnemies) {
                      let en = enemies[c];
                      do en.moveXNeg();
                      do en.changeDirection();
                      let c = c + 1;
                  }
              }
          }
      }
      if (dir = 2) { // going left
          if (atLeft = 0) {
              // continue moving left
              let c = 0;
              while (c < numEnemies) {
                  let en = enemies[c];
                  do en.moveXNeg();
                  let c = c + 1;
              }
          }
          else {
              if (atBottom = 1) {
                  // move right
                  let c = 0;
                  while (c < numEnemies) {
                      let en = enemies[c];
                      do en.moveX();
                      do en.changeDirection();
                      let c = c + 1;
                  }
              }
          }
      }
      do Sys.wait(5);
      return;
  }
      
     /** Deallocates the object's memory. */
    method void dispose() {
        do square.dispose();
        do Memory.deAlloc(this);
        return;
    }
  
      method int mod(int t, int a) {
          var int tempt;
          let tempt = t;
          if (t > 300) {
           // let time = 0;
          }
          if (t < a) {
              return t;
          }
          while (tempt > (a-1)) {
              let tempt = tempt - a;
          }
          return tempt;
      }
      
      /** Starts the game. Handles inputs from the user that control
       *  the square's movement, direction and size. */
      method void run() {
          var char key;
          var int dead;
          var boolean exit;
          var Bullet b;
          var Bullet Btemp;
          var int didHit1, didHit2;
          var int timeMod;
          let didHit1 = 0;
          let didHit2 = 0;
          let exit = false;
  
  
          while (~exit) {
              let time = time + 1;
              // waits for a key to be pressed.
              while (key = 0) {
                  if (time = 299) {
                      do chooseEnemy();
                  }
                  do moveMissile();
                  
                  let time = time + 1;	
                  let key = Keyboard.keyPressed();
                  do moveSquare();
                  let timeMod = mod(time, 60);
                  if (timeMod = 0) {
                      do moveEnemies();
                  }
                   if (isBullet = 1) {
                      let b = square.getBullet();
                      do b.fire();
                      do trackBullet(b);
                      let didHit1 = hitEnemy(b);
                      if (didHit1 = 1) {
                          do b.dispose();
                          let isBullet = 0;
                      }
                  }
                  
              }
              if (key = 1) {
                      let key = Keyboard.keyPressed();
                      while(key= 0) {
                          let key = Keyboard.keyPressed();
                      }
                  
                  //ask if want to restart.
                  
                  if (key = 130) {
                      do Screen.clearScreen();
                      do makeEnemies();
                      let exit = false;
                  }
                  else {
                      let exit = true;
                      let key = 81;
                      
                  }
              }
              
              if (key = 81) {
                  let exit = true;
              }
              if (key = 130) {
                  let time = time + 1;	
                  if (time = 299) {
                      do chooseEnemy();
                  }
                  do moveMissile();
                  let direction = 3;
              }
              if (key = 132) {
                  let time = time + 1;	
                  if (time = 299) {
                      do chooseEnemy();
                  }
                  do moveMissile();
                  let direction = 4;
              }
              if (key = 32) { // space bar = 32
                  let time = time + 1;	
                  if (time = 299) {
                      do chooseEnemy();
                  }
                  do moveMissile();
                  if (isBullet = 0) {
                      let time = time + 1;	
                      do square.fireBullet();
                      let isBullet = 1;
                  }
              }
      
              // waits for the key to be released.
              while (~(key = 0)) {
                  if (time = 299) {
                      do chooseEnemy();
                  }
                  do moveMissile();
                  
                  let time = time + 1;	
                  let key = Keyboard.keyPressed();
                  do moveSquare(); 
                  let timeMod = mod(time, 15);				
                  if (timeMod = 0) {
                      do moveEnemies();
                  }
                  let key = 0;
                  let direction = 0;
  
                  if (isBullet = 1) {
                      let b = square.getBullet();
                      do b.fire();
                      do trackBullet(b);
                      let didHit2 = hitEnemy(b);
                      if (didHit2 = 1) {
                          
                          do b.dispose();
                          let isBullet = 0;
                      }
                      
                  }
                  
              }
          
          }
              
          return;
      }
  
      /** Moves the square by 2 pixels in the current direction. */
      method void moveSquare() {
          if (direction = 3) {
              do square.moveLeft();
          }
          if (direction = 4) {
              do square.moveRight();
          }
         
          return;
      }
      
      method void trackBullet(Bullet b) {
          if (b.getY() < 11) {
              let isBullet = 0;
              do b.dispose();
          }
          return;
      }
      
     
      method void createMissile(Enemy en) {
          // set EnBullet field to some given bullet
          // 	probably passed as param
          var int enx;
          let enx = en.getX();
          let enBullet = EnemyBullet.new(enx);
          let isEnBullet = 1;
          // set isEnBullet bool to 1
          return;
      }
      
      /** Gets starting x value of bullet */
      method void chooseEnemy() {
          // loop through enemies, choose one that isn't dead
          var int c;
          var Enemy en;
          var int enx, dead;
          
          if (isEnBullet = 0) {
              let c = 0;
              while (c < numEnemies) {
                  
                  let en = enemies[c];
                  let dead = en.getIsDead();
                  if (dead = 0) { 
                      do createMissile(en);
                  }
                  let c = c + 1;
              }
          }
          
          return;
      }
      
      method void moveMissile() {
          var int my;
          var int key;
          if (isEnBullet = 1) {
              do enBullet.fire();
              let ouch = missileHitShip();
                           
              let my = enBullet.getY();
              if (my > 249) {
                  do destroyMissile();
              }			
          }
          do Sys.wait(3);
          return;
      }
      
           
      /** Undraws and deallocates bullet */
      method void destroyMissile() {
          if (isEnBullet = 1) {
              do enBullet.dispose();
              let isEnBullet = 0;
          }
          return;
      }
      
      method int missileHitShip() {
          // compares ship's x&y to missle's x&y
          
          var int sy, sx;
          var int by, bx;
          var int bs;
          var int sSize;
          let by = enBullet.getY();
          let sy = square.getY();
          let bx = enBullet.getX();
          let sx = square.getX();
          let bs = 4;
          
          
          
          if (isEnBullet = 1) {

          
              if ( ((bx > sx) & (by > sy) & (bx < (sx+ ssx)) & (by < (sy+ssy)))				|
                  (((bx+bs) > sx) & (by > sy) & ((bx+bs) < (sx + ssx)) & (by < (sy+ssy))) 	|
                  ((bx > sx) & ((by+bs) > sy) & (bx < (sx+ssx)) & ((by+bs) < (sy+ssy)))		|
                  (((bx+bs) > sx) & ((by+bs) > sy) & ((bx+bs) < (sx+ssx)) & ((by+bs) < (sy+ssy))) ) {
                  
                  do destroyMissile();
               
                  return 1;
              }
          }
  
          return 0;
      }
      
  }
  